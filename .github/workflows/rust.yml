name: Rust

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v4
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev libpng-dev libjpeg-dev libgl1-mesa-dev libglu1-mesa-dev libxkbcommon-dev libexpat1-dev libtiff-dev
    - name: Build default features
      run: cargo build
    - name: Clean before feature test
      run: cargo clean
    - name: Test all features
      run: cargo build --package=wxdragon-sys --features="aui,xrc,richtext,stc"
    - name: Clean before example builds
      run: cargo clean
    - name: Build and test examples with features
      run: |
        echo "Building examples to test actual symbol usage..."
        cd examples/rust/simple_xrc_test && cargo build
    - name: Test feature examples
      run: |
        echo "Testing XRC example..."
        cd examples/rust/simple_xrc_test && cargo clean && cargo build
        echo "Testing STC example..."  
        cd ../simple_stc_test && cargo clean && cargo build

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v4
    - run: cargo fmt --check
    - run: cargo clippy --all-targets -- -D warnings
    - name: Build default features
      run: cargo build
    - name: Clean before feature test
      run: cargo clean
    - name: Test all features
      run: cargo build --package=wxdragon-sys --features="aui,xrc,richtext,stc"
    - name: Clean before example builds  
      run: cargo clean
    - name: Test feature examples
      run: |
        echo "Testing XRC example..."
        cd examples/rust/simple_xrc_test && cargo clean && cargo build

  build-windows-msvc:
    runs-on: windows-latest
    steps:
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v4
    - name: Build default features
      run: |
        SET LIBCLANG_PATH="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin"
        cargo build
    - name: Clean before feature test
      run: cargo clean
    - name: Test all features
      run: |
        SET LIBCLANG_PATH="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin"
        cargo build --package=wxdragon-sys --features="aui,xrc,richtext,stc"
    - name: Clean before example builds
      run: cargo clean
    - name: Test feature examples
      run: |
        SET LIBCLANG_PATH="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin"
        cd examples\rust\simple_xrc_test && cargo clean && cargo build

  build-i686-pc-windows-msvc:
    runs-on: windows-latest
    steps:
    - uses: dtolnay/rust-toolchain@stable
    - uses: actions/checkout@v4
    - name: Install i686 target
      run: rustup target add i686-pc-windows-msvc
    - name: Build for i686-pc-windows-msvc (32-bit)
      run: |
        SET LIBCLANG_PATH="C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\Llvm\x64\bin"
        cargo build --target i686-pc-windows-msvc --release

  build-msys-mingw64:
    runs-on: windows-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
      - uses: actions/checkout@v4

      - name: Install 7zip
        run: choco install 7zip

      - name: Download and extract WinLibs GCC 15.1.0
        shell: cmd
        run: |
          curl -L -o winlibs-x86_64.zip "https://github.com/brechtsanders/winlibs_mingw/releases/download/15.1.0posix-13.0.0-ucrt-r2/winlibs-x86_64-posix-seh-gcc-15.1.0-mingw-w64ucrt-13.0.0-r2.zip"
          7z x winlibs-x86_64.zip -oC:\mingw64 -y
          echo C:\mingw64\mingw64\bin>>%GITHUB_PATH%
          echo CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=C:\mingw64\mingw64\bin\gcc.exe>>%GITHUB_ENV%
          echo CC=C:\mingw64\mingw64\bin\gcc.exe>>%GITHUB_ENV%
          echo CXX=C:\mingw64\mingw64\bin\g++.exe>>%GITHUB_ENV%

      - name: Print GCC version and path
        shell: cmd
        run: |
          C:\mingw64\mingw64\bin\gcc.exe --version
          C:\mingw64\mingw64\bin\g++.exe --version
          echo %PATH%

      - name: Set MinGW-w64 as the default toolchain
        run: |
          rustup toolchain install stable-x86_64-pc-windows-gnu
          rustup default stable-x86_64-pc-windows-gnu

      - name: Install x86_64-pc-windows-gnu target
        run: rustup target add x86_64-pc-windows-gnu

      - name: Build default features
        shell: cmd
        run: cargo build --target x86_64-pc-windows-gnu --release

      - name: Clean before feature test
        shell: cmd
        run: cargo clean

      - name: Test all features
        shell: cmd
        run: cargo build --package=wxdragon-sys --features="aui,xrc,richtext,stc" --target x86_64-pc-windows-gnu --release
